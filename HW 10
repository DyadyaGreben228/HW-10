#1
import datetime
#
#date = datetime.date(2015, 6, 16)
#week_number = date.isocalendar()[1]
#print(week_number)



#2
#def first_monday(year, week):
#    d = datetime.date(year, 1, 1)
#    if d.weekday() > 3:
#        d = d + datetime.timedelta(7 - d.weekday())
#    else:
#        d = d - datetime.timedelta(d.weekday())
#    dlt = datetime.timedelta(days=(week-1)*7)
#    return d + dlt
#
#date = first_monday(2015, 50)
#print(date.strftime("пн %d %B %H:%M:%S %Y"))




#3
#def all_sundays(year):
#    d = datetime.date(year, 1, 1)
#    d += datetime.timedelta(days=(6 - d.weekday()))  # First Sunday
#    while d.year == year:
#        yield d
#        d += datetime.timedelta(weeks=1)
#
#sundays = list(all_sundays(2015))
#for sunday in sundays:
#    print(sunday)



#4
#def addYears(d, years):
#    try:
#        return d.replace(year = d.year + years)
#    except ValueError:
#        return d + (datetime.date(d.year + years, 1, 1) - datetime.date(d.year, 1, 1))
#
#def get_input():
#    date_input = input("Введите дату (YYYY-MM-DD): ")
#    years_input = int(input("Введите количество лет для добавления: "))
#    date_parts = list(map(int, date_input.split('-')))
#    date = datetime.date(date_parts[0], date_parts[1], date_parts[2])
#    return date, years_input
#
#
#date, years = get_input()
#new_date = addYears(date, years)
#print("Новая дата:", new_date)
#


#5
#utc_time = datetime.datetime.utcnow()
#local_time = datetime.datetime.now()

#print("UTC Time:", utc_time)
#print("Local Time:", local_time)



#6
#def calculate_days_between_dates(date1, date2):
#    delta = date2 - date1
#    return delta.days
#
#def get_input_dates():
#    date1_input = input("Введите первую дату (YYYY-MM-DD): ")
#    date2_input = input("Введите вторую дату (YYYY-MM-DD): ")
#    
#    date1_parts = list(map(int, date1_input.split('-')))
#    date2_parts = list(map(int, date2_input.split('-')))
#    
#    date1 = datetime.date(date1_parts[0], date1_parts[1], date1_parts[2])
#    date2 = datetime.date(date2_parts[0], date2_parts[1], date2_parts[2])
#    
#    return date1, date2
#
#
#
#
#
#
#
#date1, date2 = get_input_dates()
#days_between = calculate_days_between_dates(date1, date2)
#print(f"Количество дней между {date1} и {date2}: {days_between} дней")


#7
#datetime1 = datetime.datetime(2023, 1, 1, 12, 0, 0)
#datetime2 = datetime.datetime(2023, 1, 2, 14, 30, 15)
#delta = datetime2 - datetime1
#
#days = delta.days
#seconds = delta.seconds
#hours = seconds // 3600
#minutes = (seconds % 3600) // 60
#seconds = seconds % 60
#
#print(f"{days} days, {hours} hours, {minutes} minutes, {seconds} seconds")



#8
#import calendar
#year = 2023
#month = 6
#cal = calendar.HTMLCalendar().formatmonth(year, month)
#with open("calendar.html", "w") as f:
#    f.write(cal)


#9
#def filter_words(input_file, output_file, words_file):
#    with open(words_file, 'r') as f:
#        forbidden_words = set(f.read().splitlines())
#    
#    with open(input_file, 'r') as f:
#        lines = f.readlines()
#    
#    with open(output_file, 'w') as f:
#        for line in lines:
#            filtered_line = ' '.join([word for word in line.split() if word not in forbidden_words])
#            f.write(filtered_line + '\n')
#
#filter_words("file1.txt", "file2.txt", "zapret.txt")



#10
#import transliterate
#
#def transliterate_file(input_file, output_file, direction="ru_to_en"):
#    with open(input_file, 'r') as f:
#        text = f.read()
#    
#    if direction == "ru_to_en":
#        transliterated_text = transliterate.translit(text, reversed=True)
#    else:
#        transliterated_text = transliterate.translit(text, reversed=False)
#    
#    with open(output_file, 'w') as f:
#        f.write(transliterated_text)
#
#transliterate_file("input.txt", "output.txt", direction="ru_to_en")





#11
#def combine_files():
#    files = []
#    while True:
#        file_name = input("Введите имя файла (или 'quit' для завершения): ")
#        if file_name.lower() == 'quit':
#            break
#        files.append(file_name)
#    
#    with open("combined_output.txt", 'w') as outfile:
#        for fname in files:
#            with open(fname, 'r') as infile:
#                outfile.write(infile.read() + '\n')
#
#combine_files()


#12
#def common_characters():
#    files = []
#    while True:
#        file_name = input("Введите имя файла (или 'quit' для завершения): ")
#        if file_name.lower() == 'quit':
#            break
#        files.append(file_name)
#    
#    common_chars = None
#    for fname in files:
#        with open(fname, 'r') as f:
#            file_chars = set(f.read())
#            if common_chars is None:
#                common_chars = file_chars
#            else:
#                common_chars &= file_chars
#    
#    with open("common_output.txt", 'w') as outfile:
#        outfile.write(''.join(common_chars))
#
#common_characters()



#13
#import shutil
#import os
#
#src_folders = ["video", "sub"]
#dst_folder = "watch_me"
#
#os.makedirs(dst_folder, exist_ok=True)
#
#for folder in src_folders:
#    for item in os.listdir(folder):
#        s = os.path.join(folder, item)
#        d = os.path.join(dst_folder, item)
#        shutil.move(s, d)




#14
#import os
#
#def rename_files():
#    for filename in os.listdir("."):
#        if "_" in filename and filename.endswith(".jpg"):
#            name, surname = filename.split("_")
#            new_name = f"{surname.split('.')[0]}_{name}.jpg"
#            os.rename(filename, new_name)
#
#rename_files()



#15
#import os
#import shutil
#
#os.makedirs("list", exist_ok=True)
#
#with open("list.tsv", 'r') as f:
#    files = f.read().splitlines()
#
#for file in files:
#    if os.path.isfile(file):
#        shutil.move(file, os.path.join("list", file))




#16
#def remove_last_line(input_file, output_file):
#    with open(input_file, 'r') as f:
#        lines = f.readlines()
#    
#    with open(output_file, 'w') as f:
#        f.writelines(lines[:-1])
#
#remove_last_line("input.txt", "output.txt")
















